<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构与算法 - 开篇</title>
    <url>/2020/06/30/%E6%95%B0%E6%8D%AE%E6%9C%BA%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="为什么要学习数据结构与算法？"><a href="#为什么要学习数据结构与算法？" class="headerlink" title="为什么要学习数据结构与算法？"></a>为什么要学习数据结构与算法？</h3><pre><code>有人说，数据结构与算法，计算机网络，与操作系统都一样，脱离日常开发，除了面试这辈子可能都用不到呀！

有人说，我是做业务开发的，只要熟练API，熟练框架，熟练各种中间件，写的代码不也能“飞”起来吗？

于是问题来了：为什么还要学习数据结构与算法呢？

理由一：
    面试的时候，千万不要被数据结构与算法拖了后腿
理由二：
    你真的愿意做一辈子CRUD吗
理由三：
    不想写出开源框架，中间件的工程师，不是好厨子</code></pre><a id="more"></a>

<h3 id="如何系统化学习数据结构与算法？"><a href="#如何系统化学习数据结构与算法？" class="headerlink" title="如何系统化学习数据结构与算法？"></a>如何系统化学习数据结构与算法？</h3><h4 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h4><ol>
<li>从基础开始，系统化学习</li>
<li>多动手，每一种数据结构与算法，都自己用代码实现出来</li>
<li>思路更重要：理解实现思想，不要背代码</li>
<li>与日常开发结合，对应应用场景</li>
</ol>
<h4 id="学习内容："><a href="#学习内容：" class="headerlink" title="学习内容："></a>学习内容：</h4><p>原则：数据结构与算法内容比较多，我们本着实用原则，学习经典的、常用的数据结构、与常用算法。</p>
<ol>
<li>数据结构的定义</li>
<li>算法的定义</li>
<li>复杂度分析</li>
<li>常用数据结构<ul>
<li>数组、链表、栈、队列</li>
<li>散列表、二叉树、堆</li>
<li>跳表、图</li>
</ul>
</li>
<li>常用算法<ul>
<li>递归、排序、二分查找</li>
<li>搜索、哈希、贪心、分治</li>
<li>动态规划、字符串匹配</li>
</ul>
</li>
</ol>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ol>
<li>你能用自己的话给数据结构下定义吗？</li>
<li>你能用自己的话给算法下定义吗？</li>
<li>你知道复杂度分析吗？</li>
<li>你知道时间复杂度分析吗？</li>
<li>你知道空间复杂度分析吗？</li>
<li>你知道大O表示法的含义吗？</li>
</ol>
<h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><ol>
<li><p>你能用自己的话给数据结构下定义吗？</p>
<ul>
<li>数据结构，就是【存储数据】的结构</li>
<li>比如：图书馆将书籍分类、按照规律编号存储</li>
<li>那么按照规律编号，就是“书籍数据”的存储结构</li>
</ul>
</li>
<li><p>你能用自己的话给算法下定义吗？</p>
<ul>
<li>算法，就是【操作数据】的方法</li>
<li>比如：你要找书，一本一本的找是算法</li>
<li>比如：你要找书，根据书籍的分类找也是算法</li>
</ul>
</li>
<li><p>你知道复杂度分析吗？</p>
<ul>
<li>数据结构与算法核心二字决：快、省</li>
<li>快，是指执行效率要高</li>
<li>省，是指消耗的空间要少</li>
<li>通过复杂度分析，可以衡量算法的执行效率</li>
<li>通过复杂度分析，可以衡量算法的空间消耗</li>
</ul>
</li>
<li><p>你知道时间复杂度分析吗？</p>
<ul>
<li>【时间】复杂度分析，用于衡量算法的执行效率</li>
</ul>
</li>
<li><p>你知道空间复杂度分析吗？</p>
<ul>
<li>【空间】复杂度分析，用于衡量算法的空间消耗</li>
</ul>
</li>
<li><p>你知道大O表示法的含义吗？</p>
<ul>
<li><p>大O表示法：时间复杂度，表示数据规模的增长，与算法执行时间的增长趋势</p>
</li>
<li><p>大O表示法：空间复杂度，表示数据规模的增长，与算法存储空间的增长趋势</p>
</li>
<li><p>大O表示法公式：T(n)=O(f(n))</p>
</li>
<li><p>公式解读：</p>
<ul>
<li>T(n)：代表代码执行时间</li>
<li>n：代表数据规模</li>
<li>f(n)：代表每行代码执行的次数总和</li>
<li>O：表示代码执行时间T(n)，与代码执行次数f(n)成正比</li>
</ul>
</li>
<li><p>案例：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(int n)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure>

<ul>
<li>以上代码时间复杂度是：O(n)</li>
<li>大O表示法公式：T(n)=O(f(n))</li>
<li>由于f(n)是一个线性函数，推导出：T(n)=O(n)</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法 - 复杂度</title>
    <url>/2020/07/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>算法复杂度是指算法在编写成可执行程序后，运行时所需要的资源，资源包括时间资源和内存资源。应用于数学和计算机导论。</p>
<a id="more"></a>

<h2 id="表示法"><a href="#表示法" class="headerlink" title="表示法"></a>表示法</h2><p>大O表示法</p>
<h2 id="常用原则"><a href="#常用原则" class="headerlink" title="常用原则"></a>常用原则</h2><ol>
<li>只关注循环次数最多的代码</li>
<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>
<li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>
</ol>
<h2 id="度量级"><a href="#度量级" class="headerlink" title="度量级"></a>度量级</h2><ol>
<li>常数阶：O(1)</li>
<li>对数阶：O(logn)</li>
<li>线性阶：O(n)</li>
<li>线性对数阶：O(nlogn)</li>
<li>平方阶：O(n^2)</li>
<li>立方阶：O(n^3)</li>
</ol>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法 - 数组</title>
    <url>/2020/07/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="数组特点"><a href="#数组特点" class="headerlink" title="数组特点"></a>数组特点</h2><ol>
<li><p>线性表,是基于线性表的数据结构。</p>
<p> 线性表（Linear List），就是把数据组织成一条线一样，每个线性表上的数据，只有向前和向后两个方向。基于线性表的数据结构有：数组、链表、栈、队列。</p>
</li>
</ol>
<a id="more"></a>

<ol start="2">
<li><p>连续内存空间</p>
<ul>
<li>假如有一个数组，占用空间10M</li>
<li>那么在内存中需要10M的内存空间来存储</li>
<li>如果内存中，有一块大于等于10M的空间，则存储数组成功</li>
<li>如果内存中，有两块内存:<ul>
<li>内存块memory_1等于 6M</li>
<li>内存块memory_2等于 5M</li>
<li>总内存memory_1 + memory_2 = 11M</li>
<li>虽然总内存：11M &gt; 10M，结果还是不能存储数组</li>
<li>原因：内存块memory_1、memory_2不是连续的内存空间</li>
</ul>
</li>
</ul>
</li>
<li><p>操作：查找</p>
<p> 数组的第三个特点：根据下标索引查找效率高，时间复杂度是O(1)</p>
</li>
<li><p>操作：插入</p>
<p> 数组的第四个特点：插入操作，为了保持内存空间连续，需要向后移动数据。效率低，时间复杂度是O(n)</p>
</li>
<li><p>操作：删除</p>
<p> 数组的第五个特点：删除操作，为了保持内存空间连续，需要向前移动数据。效率低，时间复杂度是O(n)</p>
</li>
<li><p>应用案例：ArrayList</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def test():</span><br><span class="line">	pass</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="讨论分享"><a href="#讨论分享" class="headerlink" title="讨论分享"></a>讨论分享</h2><ol>
<li>你知道线性表吗？<ol>
<li>线性表（Linear List），就是把数据组织成一条线一样</li>
<li>每个线性表上的数据，只有向前和向后两个方向</li>
<li>基于线性表的数据结构：数组、链表、栈、队列</li>
</ol>
</li>
<li>你能用自己的话给数组下定义吗？<ol>
<li>数组是基于线性表的数据结构</li>
<li>它是以一组连续的内存空间</li>
<li>用于存储相同数据类型的数据 </li>
</ol>
</li>
<li>你知道数组的特点吗？<ol>
<li>基于线性表</li>
<li>内存空间连续</li>
<li>存储相同数据类型数据</li>
<li>根据下标索引查找效率高，时间复杂度O(1)</li>
<li>插入、删除操作效率低，时间复杂度O(n)</li>
</ol>
</li>
<li>你知道java中的ArrayList吗？<ol>
<li>ArrayList底层是基于数组实现</li>
<li>它存在的理由是功能更加丰富，支持动态扩容</li>
<li>每次扩容后，新的存储空间，是原空间的1.5倍</li>
</ol>
</li>
<li>你知道ArrayList的最佳实践吗？<ol>
<li>由于ArrayList底层是数组，为了保持内存空间连续</li>
<li>每次扩容后，都需要进行数据，从原数组，向新数组的拷贝</li>
<li>需要额外的临时存储空间，拷贝数据效率低</li>
<li>在实际开发中，如果预先可以预估存储元素的范围，比如90…100</li>
<li>那么在创建ArrayList对象的时候，可以指定初始容量100，即：<br>ArrayList list = new ArrayList(100);</li>
<li>这样执行效率最优</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法 - 链表</title>
    <url>/2020/07/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>链表与数组一样，都是常用的基础数据结构，它通过“指针”将一组零散的内存块串联起来使用。每一个零散的内存块称为：节点。</p>
<p>为了将所有节点串联起来，每个链表节点除了存储数据，还需要存储链上下一个节点的地址，我们把存储下一个节点地址的指针，称为：后继指针。</p>
<p>链表有两个特殊的节点：头节点、尾节点</p>
<p>头节点：第一个节点</p>
<p>尾节点：后继指针指向null的节点</p>
<p><img src="/images/pasted-0.png" alt="upload successful"></p>
<h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><h3 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h3><p>数组的一个特点：需要连续的内存空间。链表与数组刚好相反，链表不需要连续的内存空间，它是通过“指针”将一组零散的内存块串联起来使用</p>
<p><img src="/images/pasted-1.png" alt="upload successful"></p>
<h3 id="操作方式"><a href="#操作方式" class="headerlink" title="操作方式"></a>操作方式</h3><ol>
<li><p>插入、删除</p>
<p>数组的插入、删除操作，需要向后，向前移动数据，时间复杂度是：O(n)<br> 链表的插入、删除操作，只需要改变节点指针，不需要移动数据，时间复杂度是：O(1)</p>
</li>
</ol>
<p><img src="/images/pasted-2.png" alt="upload successful"></p>
<ol start="2">
<li><p>查找</p>
<p> 数组的内存空间是连续的，支持随机访问操作，根据下标索引访问，时间复杂度是：O(1)<br> 链表的内存空间不连续，不支持随机访问操作，从头节点遍历访问，时间复杂度是：O(n)</p>
</li>
</ol>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>你能用自己的话描述链表吗？</p>
<ol>
<li>链表与数组一样，都是常用的基础数据结构</li>
<li>链表通过“指针”将一组零散的内存块串联起来使用</li>
<li>每一个零散的内存块称为：节点</li>
<li>链表的每个节点，除了存储数据以外，还需要存储一个指向下一个节点的指针</li>
<li>通常我们把指向下一个节点的指针，称为：后继指针</li>
</ol>
</li>
<li><p>你知道链表和数组的区别吗？</p>
<ol>
<li>数组需要连续的内存空间，链表不需要</li>
<li>插入、删除操作<ol>
<li>数组需要移动数据，时间复杂度是：O(n)</li>
<li>链表不需要移动数据，时间复杂度是：O(1)</li>
</ol>
</li>
<li>查找操作<ol>
<li>数组支持随机访问操作，时间复杂度是：O(1)</li>
<li>链表需要从头节点遍历，不支持随机访问操作，时间复杂度是：O(n)</li>
</ol>
</li>
</ol>
</li>
<li><p>你知道都有哪些常用的链表吗？</p>
<ol>
<li>单链表</li>
<li>双向链表</li>
<li>循环链表</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
</search>
